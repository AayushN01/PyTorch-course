WORKING WITH IMAGES AND LOGISTIC REGRESSION
---------------------------------------------
1) LOGISTIC REGRESSION
- MNIST handwritten database
- torchvision = helper library;contains utilities for working with image data
		also helps to automatically download datasets like MNIST
- to download dataset call mnist class provided a location where data will get downloaded
- The dataset has 60,000 images which can be used to train the model. There is also an additonal test set of 10,000 images which can be created by passing train=False to the MNIST class.
______________________________________________________________________________

Training and Validation Datasets
While building real world machine learning models, it is quite common to split the dataset into 3 parts:

Training set - used to train the model i.e. compute the loss and adjust the weights of the model using gradient descent.
Validation set - used to evaluate the model while training, adjust hyperparameters (learning rate etc.) and pick the best version of the model.
Test set - used to compare different models, or different types of modeling approaches, and report the final accuracy of the model.
In the MNIST dataset, there are 60,000 training images, and 10,000 test images. The test set is standardized so that different researchers can report the results of their models against the same set of images.

Since there's no predefined validation set, we must manually split the 60,000 images into training and validation datasets. Let's set aside 10,000 randomly chosen images for validation. We can do this using the random_spilt method from PyTorch.
______________________________________________________________________________________________
CHoosing batch size== Make large as possible. start with certain size; if working fine double it; and continue;if you are running out of memory or performance,stop
			power of 2 recommended
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 STEPS
1) Explore data - >Import the required libraries
		  >Download trainning dataset/ Create trainning dataset
		  >check length of dataset [len(dataset)]
		  >Create test model by passing train=False
		  > Convert images to tensor as pyTorch does not know how to work with image
			**use the ToTensor transform to convert images into PyTorch tensors.**
2) Trainning and Validation 
		  >choose random sample for validation sets, because  training data is often ordered by the target labels i.e. images of 0s, followed by images of 1s, followed by images of 2s and so on. If we were to pick a 20% validation set simply by selecting the last 20% of the images, the validation set would only consist of images of 8s and 9s, whereas the training set would contain no images of 8s and 9s. This would make it impossible to train a good model using the training set, which also performs well on the validation set (and on real world data).
 	** Train model- 
3) Evaluate metric and loss function
4) Testing with individual images
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------	